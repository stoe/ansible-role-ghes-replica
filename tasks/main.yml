---
- name: Check if we already have a SSH key
  # http://docs.ansible.com/ansible/command_module.html
  command: ghe-config secrets.admin-ssh-pubkey
  register: repl_ssh_pre
  changed_when: false
  failed_when:
    # 0   no errors -> continue
    # 1   status warnings exist -> continue
    # 2   status errors exist -> fail
    # 255 not an error -> continue
    - repl_ssh_pre.rc >= 2
    - repl_ssh_pre.rc != 255

- name: Save existing SSH key for later
  # http://docs.ansible.com/ansible/set_fact_module.html
  set_fact:
    replica_ssh_key: "{{ repl_ssh_pre.stdout }}"
  when: repl_ssh_pre.stdout

- name: Define setup command
  set_fact:
    github_repl_setup: "ghe-repl-setup {{ github_host }}"
  when:
    - replica_role != "geo"

- name: Define setup command (geo)
  set_fact:
    github_repl_setup: "ghe-repl-setup --add {{ github_host }}"
  when:
    - replica_role == "geo"

- name: Generate key the first time
  block:

  - name: Run ghe-repl-setup to generate key
    # http://docs.ansible.com/ansible/command_module.html
    command: "{{ github_repl_setup }}"
    register: repl_setup_pre
    changed_when:
      # very first run
      - repl_setup_pre.rc == 255
    failed_when:
      # 0, no errors -> continue
      # 1, status warnings exist -> continue
      # 2, status errors exist -> fail
      - repl_setup_pre.rc >= 2

  - name: Get SSH key
    # http://docs.ansible.com/ansible/command_module.html
    command: ghe-config secrets.admin-ssh-pubkey
    register: repl_ssh
    changed_when: false

  - name: Save new primary SSH key for later
    # http://docs.ansible.com/ansible/set_fact_module.html
    set_fact:
      replica_ssh_key: "{{ repl_ssh.stdout }}"

  when: repl_ssh_pre.rc == 1

- name: Add SSH key to primary
  block:

  - name: Add SSH key to primary
    # http://docs.ansible.com/ansible/authorized_key_module.html
    authorized_key:
      user: admin
      key: "{{ replica_ssh_key }}"
      state: present
    register: add_authorized_key

  - name: Run ghe-copy-authorized-keys on primary node
    # http://docs.ansible.com/ansible/command_module.html
    command: /usr/local/share/enterprise/ghe-copy-authorized-keys -r -v
    register: copy_authorized_key

  # NOTE: We will need to look at this delegation,
  #       as it makes the role inflexible
  delegate_to: primary

- name: Add primary {{ github_host }} to known_hosts
  # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/shell_module.html
  shell: "ssh-keyscan -4 -p 122 -H {{ github_host }} >> /home/admin/.ssh/known_hosts"
  register: ssh_keyscan
  changed_when:
    - ssh_keyscan.rc == 0
  failed_when:
    - ssh_keyscan.rc > 0

- pause: seconds=5

- name: Configure replica
  # http://docs.ansible.com/ansible/command_module.html
  command: "{{ github_repl_setup }}"
  register: repl_setup
  failed_when:
    # 0   no errors -> continue
    # 1   status warnings exist -> continue
    # 2   status errors exist -> fail
    - repl_setup.rc >= 2
    - '"Permission denied (publickey)." in repl_setup.stderr'

- pause: seconds=5

- name: Start replication
  # http://docs.ansible.com/ansible/command_module.html
  command: ghe-repl-start
  # Dont wait for the command to finish
  # https://docs.ansible.com/ansible/latest/user_guide/playbooks_async.html#concurrent-tasks-poll-0
  async: 1000
  poll: 0
  changed_when: false
  ignore_errors: true
  register: repl_start

- name: Verify replication
  block:

  - name: Verify replication startup
    # http://docs.ansible.com/ansible/async_status_module.html
    async_status:
      jid: "{{ repl_start.ansible_job_id }}"
    register: repl_start_result
    until: repl_start_result.finished
    retries: 100

  - name: Check replication status
    # http://docs.ansible.com/ansible/command_module.html
    command: ghe-repl-status
    register: repl_status
    # 0, no errors -> continue
    # 1, status warnings exist -> continue
    # 2, status errors exist -> fail
    failed_when: repl_status.rc >= 2
    changed_when: false

  when:
    - verify_replication|bool
